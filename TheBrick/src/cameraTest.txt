#include <esp_camera.h>
#include <TFT_eSPI.h>
#include <TJpg_Decoder.h>

// TFT instance
TFT_eSPI tft = TFT_eSPI();

// === Camera Pin Mapping ===
#define PWDN_GPIO_NUM  -1
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM  15
#define SIOD_GPIO_NUM  4
#define SIOC_GPIO_NUM  5

#define Y2_GPIO_NUM 11
#define Y3_GPIO_NUM 9
#define Y4_GPIO_NUM 8
#define Y5_GPIO_NUM 10
#define Y6_GPIO_NUM 12
#define Y7_GPIO_NUM 18
#define Y8_GPIO_NUM 17
#define Y9_GPIO_NUM 16

#define VSYNC_GPIO_NUM 6
#define HREF_GPIO_NUM  7
#define PCLK_GPIO_NUM  13

// === JPEG Output to TFT ===
bool tft_output(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t *bitmap) {
  tft.pushImage(x, y, w, h, bitmap);
  return true;
}

void setup() {
  Serial.begin(115200);
  delay(500);

  // === Init TFT ===
  tft.begin();
  tft.setRotation(0);
  tft.invertDisplay(true);
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE);
  tft.drawString("Init Camera...", 10, 10);

  // === Setup JPEG decoder ===
  TJpgDec.setJpgScale(1);          // Full size
  TJpgDec.setSwapBytes(true);      // For TFT_eSPI byte order
  TJpgDec.setCallback(tft_output); // Set draw callback

  // === Camera config ===
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;

  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB565;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_QVGA;  // 320x240
    config.jpeg_quality = 10;
    config.fb_count = 2;
    config.fb_location = CAMERA_FB_IN_PSRAM;
    config.grab_mode = CAMERA_GRAB_LATEST;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
    config.fb_location = CAMERA_FB_IN_DRAM;
  }

  // === Init camera ===
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed! 0x%x\n", err);
    tft.fillScreen(TFT_RED);
    tft.drawString("Camera FAIL", 10, 30);
    return;
  }

  sensor_t *s = esp_camera_sensor_get();
  s->set_vflip(s, 1);  // Flip if image is upside down
  s->set_hmirror(s, 1); 

  tft.fillScreen(TFT_GREEN);
  tft.drawString("Camera OK", 10, 30);
  delay(1000);
}

void loop() {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

if (fb->format == PIXFORMAT_RGB565) {
  // Frame size from camera
  int camWidth = fb->width;
  int camHeight = fb->height;

  // Optional: center the image on the display
  int xOffset = (tft.width() - camWidth) / 2;
  int yOffset = (tft.height() - camHeight) / 2;

  // Cast buffer to uint16_t* because RGB565 = 2 bytes per pixel
  uint16_t *img = (uint16_t *)fb->buf;

  // Draw directly
  tft.pushImage(xOffset, yOffset, camWidth, camHeight, img);
}
  esp_camera_fb_return(fb);
}
